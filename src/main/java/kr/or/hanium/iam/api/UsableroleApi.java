/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package kr.or.hanium.iam.api;

import kr.or.hanium.iam.api.model.UsableRoleDto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Api(value = "Usablerole", description = "the Usablerole API")
public interface UsableroleApi {

    /**
     * DELETE /api/v1/usableroled/{id}
     * Update a UsableRole with the specified id
     *
     * @param id UsableRole ID (required)
     * @return OK (status code 200)
     */
    @ApiOperation(value = "", nickname = "deleteUsableRole", notes = "Update a UsableRole with the specified id", response = UsableRoleDto.class, tags={ "usablerole", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = UsableRoleDto.class) })
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/api/v1/usableroled/{id}",
            produces = { "application/json" }
    )
    ResponseEntity<UsableRoleDto> deleteUsableRole(@ApiParam(value = "UsableRole ID", required = true) @PathVariable("id") Integer id);


    /**
     * GET /api/v1/usablerole
     *
     * @return Success (status code 200)
     */
    @ApiOperation(value = "", nickname = "getUsableRoleList", notes = "", response = UsableRoleDto.class, responseContainer = "List", tags={ "usablerole", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Success", response = UsableRoleDto.class, responseContainer = "List") })
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/api/v1/usablerole",
            produces = { "application/json" }
    )
    ResponseEntity<List<UsableRoleDto>> getUsableRoleList();


    /**
     * POST /api/v1/usablerole
     * Create new UsableRole
     *
     * @param usableRoleDto  (optional)
     * @return OK (status code 201)
     */
    @ApiOperation(value = "", nickname = "postUsableRole", notes = "Create new UsableRole", response = UsableRoleDto.class, tags={ "usablerole", })
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "OK", response = UsableRoleDto.class) })
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/api/v1/usablerole",
            produces = { "application/json" },
            consumes = { "application/json" }
    )
    ResponseEntity<UsableRoleDto> postUsableRole(@ApiParam(value = "") @Valid @RequestBody(required = false) UsableRoleDto usableRoleDto);


    /**
     * PUT /api/v1/usableroles/{id}
     * Update a UsableRole with the specified id
     *
     * @param id UsableRole ID (required)
     * @param usableRoleDto  (optional)
     * @return OK (status code 200)
     */
    @ApiOperation(value = "", nickname = "putUsableRole", notes = "Update a UsableRole with the specified id", response = UsableRoleDto.class, tags={ "usablerole", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = UsableRoleDto.class) })
    @RequestMapping(
            method = RequestMethod.PUT,
            value = "/api/v1/usableroles/{id}",
            produces = { "application/json" },
            consumes = { "application/json" }
    )
    ResponseEntity<UsableRoleDto> putUsableRole(@ApiParam(value = "UsableRole ID", required = true) @PathVariable("id") Integer id,@ApiParam(value = "") @Valid @RequestBody(required = false) UsableRoleDto usableRoleDto);

}
